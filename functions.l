(load "tables.l")
(setq *U32 `(hex "FFFFFFFF"))
(de mod32 (N)
   (& N *U32) )
(de mod32* (A B)
   (mod32 (* A B)) )
(de **Mod (X Y N)
   (let M 1
      (loop
         (when (bit? 1 Y)
            (setq M (% (* M X) N)) )
         (T (=0 (setq Y (>> 1 Y)))
            M )
         (setq X (% (* X X) N)) ) ) )
(de positive (N)
   (- 64 (length (bin N))) )
(de sprp (N B)
   (msg 'next)
   (let (D1 (>> 1 (dec N))  D D1  Z 0  R 0  NC 0)
      (until (bit? 1 D1)
         (setq D1 (>> 1 D1))
         (inc 'Z) )
      (println 'D D 'D1 D1 'Z Z)
      (println 'N N 'N-1 (dec N) (* D (** 2 Z)))

      (println 'mod B D N)
      (setq R (**Mod B D N))
      (println 'R R)

      (println 'secondIF (**Mod B (** R 2) N))

      #(setq NC (positive N))
      # (println 'posZ (positive Z) 'R*R 'NC NC (* R R) (% (mod32* R R) N))
      (do Z
         (setq R (% (* R R) N))
         (println 'inside-Z 'R R)
         (when (= R (dec N))
            (println 'found 'R R 'decN (dec N))
         )
      )
      (println 'after-Z-loop 'B B 'N N)
   )
)
#(sprp 480194653 2139)
#(sprp 20074069 32374)
#(sprp 92829781 3350)
#(sprp 8718775377449 2)
#(sprp 8651776913431 2)
(sprp 8651776913431 767)

(de check32 (N)
   (let B (get *B32 (inc (>> 24 (mod32* `(hex "AD625B89") N))))
      (println 'B32 B)
   )
)
(de check64 (N)
   (let B (get *B64 (inc (>> 18 (mod32* `(hex "AD625B89") N))))
      (println 'B64 B)
   )
)

#(println (check32 480194653))
#(println (check32 92829781))
#(println (check64 8718775377449))
#(println (check64 3315293452192821991))
(println (check64 1152965996591997761))




(msg 'ok)
(bye)
